# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GlobalFilter): GlobalConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
}

input DocumentFilter {
  global: GlobalFilter
  page: PageFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Global | Page | Folder

type GlobalAlertBanner {
  alertLabel: String!
  alertLink: String!
  alertLinkText: String!
}

type GlobalNavigationMainNavFeaturedCardsImage {
  src: String!
  alt: String!
}

type GlobalNavigationMainNavFeaturedCards {
  image: GlobalNavigationMainNavFeaturedCardsImage
  title: String!
  description: String!
  ctaText: String!
  ctaLink: String!
  layout: String
}

type GlobalNavigationMainNavSubItems {
  label: String!
  href: String!
  icon: String
  variant: String
  description: String
}

type GlobalNavigationMainNav {
  label: String!
  href: String
  featuredCards: [GlobalNavigationMainNavFeaturedCards]
  subItems: [GlobalNavigationMainNavSubItems]
}

type GlobalNavigationFooterContact {
  phone: String
  textNumber: String
  email: String
}

type GlobalNavigationFooterSocial {
  platform: String
  url: String
}

type GlobalNavigationFooter {
  contact: GlobalNavigationFooterContact
  social: [GlobalNavigationFooterSocial]
  companyName: String
}

type GlobalNavigation {
  mainNav: [GlobalNavigationMainNav]
  footer: GlobalNavigationFooter
}

type Global implements Node & Document {
  alertBanner: GlobalAlertBanner
  navigation: GlobalNavigation
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input GlobalAlertBannerFilter {
  alertLabel: StringFilter
  alertLink: StringFilter
  alertLinkText: StringFilter
}

input GlobalNavigationMainNavFeaturedCardsImageFilter {
  src: StringFilter
  alt: StringFilter
}

input GlobalNavigationMainNavFeaturedCardsFilter {
  image: GlobalNavigationMainNavFeaturedCardsImageFilter
  title: StringFilter
  description: StringFilter
  ctaText: StringFilter
  ctaLink: StringFilter
  layout: StringFilter
}

input GlobalNavigationMainNavSubItemsFilter {
  label: StringFilter
  href: StringFilter
  icon: StringFilter
  variant: StringFilter
  description: StringFilter
}

input GlobalNavigationMainNavFilter {
  label: StringFilter
  href: StringFilter
  featuredCards: GlobalNavigationMainNavFeaturedCardsFilter
  subItems: GlobalNavigationMainNavSubItemsFilter
}

input GlobalNavigationFooterContactFilter {
  phone: StringFilter
  textNumber: StringFilter
  email: StringFilter
}

input GlobalNavigationFooterSocialFilter {
  platform: StringFilter
  url: StringFilter
}

input GlobalNavigationFooterFilter {
  contact: GlobalNavigationFooterContactFilter
  social: GlobalNavigationFooterSocialFilter
  companyName: StringFilter
}

input GlobalNavigationFilter {
  mainNav: GlobalNavigationMainNavFilter
  footer: GlobalNavigationFooterFilter
}

input GlobalFilter {
  alertBanner: GlobalAlertBannerFilter
  navigation: GlobalNavigationFilter
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type PagePeopleImage {
  src: String
  alt: String
}

type PagePeopleContact {
  email: String
  phone: String
  website: String
}

type PagePeopleSocial {
  linkedin: String
  twitter: String
  instagram: String
  facebook: String
}

type PagePeople {
  id: String!
  name: String!
  title: String
  bio: String
  image: PagePeopleImage
  contact: PagePeopleContact
  social: PagePeopleSocial
  specialties: [String]
  location: String
}

type PageHeaderBlocksHeroCollageImages {
  src: String
}

type PageHeaderBlocksHero {
  heading: String
  subheading: String
  buttonText: String
  buttonLink: String
  collageImages: [PageHeaderBlocksHeroCollageImages]
}

union PageHeaderBlocks = PageHeaderBlocksHero

type PageBlocksCtaBlock {
  heading: String
  subheading: String
  content: JSON
  buttonText: String
  buttonLink: String
  imageLeft: Boolean
  imageSrc: String
  imageAlt: String
  backgroundColor: String
}

type PageBlocksHeroCollageImages {
  src: String
}

type PageBlocksHero {
  heading: String
  subheading: String
  buttonText: String
  buttonLink: String
  collageImages: [PageBlocksHeroCollageImages]
}

type PageBlocksRichTextBlockFeatures {
  src: String
  title: String
  description: JSON
}

type PageBlocksRichTextBlock {
  heading: String
  subheading: String
  features: [PageBlocksRichTextBlockFeatures]
}

type PageBlocksCarouselBlockSlides {
  src: String
  alt: String
  testimonialText: String!
  clientName: String!
  clientType: String
}

type PageBlocksCarouselBlock {
  blockTitle: String
  blockSubtitle: String
  slides: [PageBlocksCarouselBlockSlides]
  options_loop: Boolean
  autoplayInterval: Float
}

type PageBlocksServiceListingBlockServices {
  name: String!
  slug: String!
}

type PageBlocksServiceListingBlock {
  title: String
  services: [PageBlocksServiceListingBlockServices]
  ctaText: String
  ctaLink: String
  ctaContent: String
  backgroundColor: String
}

type PageBlocksBannerBlockBenefits {
  icon: String
  heading: String!
  text: String!
  backgroundColor: String
  buttonText: String
  buttonLink: String
}

type PageBlocksBannerBlock {
  title: String
  subtitle: String
  benefits: [PageBlocksBannerBlockBenefits]
}

union PageBlocks = PageBlocksCtaBlock | PageBlocksHero | PageBlocksRichTextBlock | PageBlocksCarouselBlock | PageBlocksServiceListingBlock | PageBlocksBannerBlock

type Page implements Node & Document {
  title: String!
  description: String!
  template: String!
  subtitle: String
  peopleType: String
  people: [PagePeople]
  headerBlocks: [PageHeaderBlocks]
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PagePeopleImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input PagePeopleContactFilter {
  email: StringFilter
  phone: StringFilter
  website: StringFilter
}

input PagePeopleSocialFilter {
  linkedin: StringFilter
  twitter: StringFilter
  instagram: StringFilter
  facebook: StringFilter
}

input PagePeopleFilter {
  id: StringFilter
  name: StringFilter
  title: StringFilter
  bio: StringFilter
  image: PagePeopleImageFilter
  contact: PagePeopleContactFilter
  social: PagePeopleSocialFilter
  specialties: StringFilter
  location: StringFilter
}

input PageHeaderBlocksHeroCollageImagesFilter {
  src: ImageFilter
}

input PageHeaderBlocksHeroFilter {
  heading: StringFilter
  subheading: StringFilter
  buttonText: StringFilter
  buttonLink: StringFilter
  collageImages: PageHeaderBlocksHeroCollageImagesFilter
}

input PageHeaderBlocksFilter {
  hero: PageHeaderBlocksHeroFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input PageBlocksCtaBlockFilter {
  heading: StringFilter
  subheading: StringFilter
  content: RichTextFilter
  buttonText: StringFilter
  buttonLink: StringFilter
  imageLeft: BooleanFilter
  imageSrc: ImageFilter
  imageAlt: StringFilter
  backgroundColor: StringFilter
}

input PageBlocksHeroCollageImagesFilter {
  src: ImageFilter
}

input PageBlocksHeroFilter {
  heading: StringFilter
  subheading: StringFilter
  buttonText: StringFilter
  buttonLink: StringFilter
  collageImages: PageBlocksHeroCollageImagesFilter
}

input PageBlocksRichTextBlockFeaturesFilter {
  src: ImageFilter
  title: StringFilter
  description: RichTextFilter
}

input PageBlocksRichTextBlockFilter {
  heading: StringFilter
  subheading: StringFilter
  features: PageBlocksRichTextBlockFeaturesFilter
}

input PageBlocksCarouselBlockSlidesFilter {
  src: ImageFilter
  alt: StringFilter
  testimonialText: StringFilter
  clientName: StringFilter
  clientType: StringFilter
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input PageBlocksCarouselBlockFilter {
  blockTitle: StringFilter
  blockSubtitle: StringFilter
  slides: PageBlocksCarouselBlockSlidesFilter
  options_loop: BooleanFilter
  autoplayInterval: NumberFilter
}

input PageBlocksServiceListingBlockServicesFilter {
  name: StringFilter
  slug: StringFilter
}

input PageBlocksServiceListingBlockFilter {
  title: StringFilter
  services: PageBlocksServiceListingBlockServicesFilter
  ctaText: StringFilter
  ctaLink: StringFilter
  ctaContent: StringFilter
  backgroundColor: StringFilter
}

input PageBlocksBannerBlockBenefitsFilter {
  icon: StringFilter
  heading: StringFilter
  text: StringFilter
  backgroundColor: StringFilter
  buttonText: StringFilter
  buttonLink: StringFilter
}

input PageBlocksBannerBlockFilter {
  title: StringFilter
  subtitle: StringFilter
  benefits: PageBlocksBannerBlockBenefitsFilter
}

input PageBlocksFilter {
  ctaBlock: PageBlocksCtaBlockFilter
  hero: PageBlocksHeroFilter
  richTextBlock: PageBlocksRichTextBlockFilter
  carouselBlock: PageBlocksCarouselBlockFilter
  serviceListingBlock: PageBlocksServiceListingBlockFilter
  bannerBlock: PageBlocksBannerBlockFilter
}

input PageFilter {
  title: StringFilter
  description: StringFilter
  template: StringFilter
  subtitle: StringFilter
  peopleType: StringFilter
  people: PagePeopleFilter
  headerBlocks: PageHeaderBlocksFilter
  blocks: PageBlocksFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
}

input DocumentUpdateMutation {
  global: GlobalMutation
  page: PageMutation
  relativePath: String
}

input DocumentMutation {
  global: GlobalMutation
  page: PageMutation
}

input GlobalAlertBannerMutation {
  alertLabel: String
  alertLink: String
  alertLinkText: String
}

input GlobalNavigationMainNavFeaturedCardsImageMutation {
  src: String
  alt: String
}

input GlobalNavigationMainNavFeaturedCardsMutation {
  image: GlobalNavigationMainNavFeaturedCardsImageMutation
  title: String
  description: String
  ctaText: String
  ctaLink: String
  layout: String
}

input GlobalNavigationMainNavSubItemsMutation {
  label: String
  href: String
  icon: String
  variant: String
  description: String
}

input GlobalNavigationMainNavMutation {
  label: String
  href: String
  featuredCards: [GlobalNavigationMainNavFeaturedCardsMutation]
  subItems: [GlobalNavigationMainNavSubItemsMutation]
}

input GlobalNavigationFooterContactMutation {
  phone: String
  textNumber: String
  email: String
}

input GlobalNavigationFooterSocialMutation {
  platform: String
  url: String
}

input GlobalNavigationFooterMutation {
  contact: GlobalNavigationFooterContactMutation
  social: [GlobalNavigationFooterSocialMutation]
  companyName: String
}

input GlobalNavigationMutation {
  mainNav: [GlobalNavigationMainNavMutation]
  footer: GlobalNavigationFooterMutation
}

input GlobalMutation {
  alertBanner: GlobalAlertBannerMutation
  navigation: GlobalNavigationMutation
}

input PagePeopleImageMutation {
  src: String
  alt: String
}

input PagePeopleContactMutation {
  email: String
  phone: String
  website: String
}

input PagePeopleSocialMutation {
  linkedin: String
  twitter: String
  instagram: String
  facebook: String
}

input PagePeopleMutation {
  id: String
  name: String
  title: String
  bio: String
  image: PagePeopleImageMutation
  contact: PagePeopleContactMutation
  social: PagePeopleSocialMutation
  specialties: [String]
  location: String
}

input PageHeaderBlocksHeroCollageImagesMutation {
  src: String
}

input PageHeaderBlocksHeroMutation {
  heading: String
  subheading: String
  buttonText: String
  buttonLink: String
  collageImages: [PageHeaderBlocksHeroCollageImagesMutation]
}

input PageHeaderBlocksMutation {
  hero: PageHeaderBlocksHeroMutation
}

input PageBlocksCtaBlockMutation {
  heading: String
  subheading: String
  content: JSON
  buttonText: String
  buttonLink: String
  imageLeft: Boolean
  imageSrc: String
  imageAlt: String
  backgroundColor: String
}

input PageBlocksHeroCollageImagesMutation {
  src: String
}

input PageBlocksHeroMutation {
  heading: String
  subheading: String
  buttonText: String
  buttonLink: String
  collageImages: [PageBlocksHeroCollageImagesMutation]
}

input PageBlocksRichTextBlockFeaturesMutation {
  src: String
  title: String
  description: JSON
}

input PageBlocksRichTextBlockMutation {
  heading: String
  subheading: String
  features: [PageBlocksRichTextBlockFeaturesMutation]
}

input PageBlocksCarouselBlockSlidesMutation {
  src: String
  alt: String
  testimonialText: String
  clientName: String
  clientType: String
}

input PageBlocksCarouselBlockMutation {
  blockTitle: String
  blockSubtitle: String
  slides: [PageBlocksCarouselBlockSlidesMutation]
  options_loop: Boolean
  autoplayInterval: Float
}

input PageBlocksServiceListingBlockServicesMutation {
  name: String
  slug: String
}

input PageBlocksServiceListingBlockMutation {
  title: String
  services: [PageBlocksServiceListingBlockServicesMutation]
  ctaText: String
  ctaLink: String
  ctaContent: String
  backgroundColor: String
}

input PageBlocksBannerBlockBenefitsMutation {
  icon: String
  heading: String
  text: String
  backgroundColor: String
  buttonText: String
  buttonLink: String
}

input PageBlocksBannerBlockMutation {
  title: String
  subtitle: String
  benefits: [PageBlocksBannerBlockBenefitsMutation]
}

input PageBlocksMutation {
  ctaBlock: PageBlocksCtaBlockMutation
  hero: PageBlocksHeroMutation
  richTextBlock: PageBlocksRichTextBlockMutation
  carouselBlock: PageBlocksCarouselBlockMutation
  serviceListingBlock: PageBlocksServiceListingBlockMutation
  bannerBlock: PageBlocksBannerBlockMutation
}

input PageMutation {
  title: String
  description: String
  template: String
  subtitle: String
  peopleType: String
  people: [PagePeopleMutation]
  headerBlocks: [PageHeaderBlocksMutation]
  blocks: [PageBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
