//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  global: Global;
  globalConnection: GlobalConnection;
  page: Page;
  pageConnection: PageConnection;
  post: Post;
  postConnection: PostConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGlobalArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGlobalConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<GlobalFilter>;
};


export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
};


export type QueryPostArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPostConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
};

export type DocumentFilter = {
  global?: InputMaybe<GlobalFilter>;
  page?: InputMaybe<PageFilter>;
  post?: InputMaybe<PostFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Global | Page | Post | Folder;

export type GlobalAlertBanner = {
  __typename?: 'GlobalAlertBanner';
  alertLabel: Scalars['String']['output'];
  alertLink: Scalars['String']['output'];
  alertLinkText: Scalars['String']['output'];
};

export type GlobalNavigationMainNavFeaturedCardsImage = {
  __typename?: 'GlobalNavigationMainNavFeaturedCardsImage';
  src: Scalars['String']['output'];
  alt: Scalars['String']['output'];
};

export type GlobalNavigationMainNavFeaturedCards = {
  __typename?: 'GlobalNavigationMainNavFeaturedCards';
  image?: Maybe<GlobalNavigationMainNavFeaturedCardsImage>;
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  ctaText: Scalars['String']['output'];
  ctaLink: Scalars['String']['output'];
  layout?: Maybe<Scalars['String']['output']>;
};

export type GlobalNavigationMainNavSubItems = {
  __typename?: 'GlobalNavigationMainNavSubItems';
  label: Scalars['String']['output'];
  href: Scalars['String']['output'];
  icon?: Maybe<Scalars['String']['output']>;
  variant?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
};

export type GlobalNavigationMainNav = {
  __typename?: 'GlobalNavigationMainNav';
  label: Scalars['String']['output'];
  href?: Maybe<Scalars['String']['output']>;
  featuredCards?: Maybe<Array<Maybe<GlobalNavigationMainNavFeaturedCards>>>;
  subItems?: Maybe<Array<Maybe<GlobalNavigationMainNavSubItems>>>;
};

export type GlobalNavigationFooterContact = {
  __typename?: 'GlobalNavigationFooterContact';
  phone?: Maybe<Scalars['String']['output']>;
  textNumber?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
};

export type GlobalNavigationFooterSocial = {
  __typename?: 'GlobalNavigationFooterSocial';
  platform?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type GlobalNavigationFooter = {
  __typename?: 'GlobalNavigationFooter';
  contact?: Maybe<GlobalNavigationFooterContact>;
  social?: Maybe<Array<Maybe<GlobalNavigationFooterSocial>>>;
  companyName?: Maybe<Scalars['String']['output']>;
};

export type GlobalNavigation = {
  __typename?: 'GlobalNavigation';
  mainNav?: Maybe<Array<Maybe<GlobalNavigationMainNav>>>;
  footer?: Maybe<GlobalNavigationFooter>;
};

export type Global = Node & Document & {
  __typename?: 'Global';
  alertBanner?: Maybe<GlobalAlertBanner>;
  navigation?: Maybe<GlobalNavigation>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type GlobalAlertBannerFilter = {
  alertLabel?: InputMaybe<StringFilter>;
  alertLink?: InputMaybe<StringFilter>;
  alertLinkText?: InputMaybe<StringFilter>;
};

export type GlobalNavigationMainNavFeaturedCardsImageFilter = {
  src?: InputMaybe<StringFilter>;
  alt?: InputMaybe<StringFilter>;
};

export type GlobalNavigationMainNavFeaturedCardsFilter = {
  image?: InputMaybe<GlobalNavigationMainNavFeaturedCardsImageFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  ctaText?: InputMaybe<StringFilter>;
  ctaLink?: InputMaybe<StringFilter>;
  layout?: InputMaybe<StringFilter>;
};

export type GlobalNavigationMainNavSubItemsFilter = {
  label?: InputMaybe<StringFilter>;
  href?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
  variant?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type GlobalNavigationMainNavFilter = {
  label?: InputMaybe<StringFilter>;
  href?: InputMaybe<StringFilter>;
  featuredCards?: InputMaybe<GlobalNavigationMainNavFeaturedCardsFilter>;
  subItems?: InputMaybe<GlobalNavigationMainNavSubItemsFilter>;
};

export type GlobalNavigationFooterContactFilter = {
  phone?: InputMaybe<StringFilter>;
  textNumber?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
};

export type GlobalNavigationFooterSocialFilter = {
  platform?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
};

export type GlobalNavigationFooterFilter = {
  contact?: InputMaybe<GlobalNavigationFooterContactFilter>;
  social?: InputMaybe<GlobalNavigationFooterSocialFilter>;
  companyName?: InputMaybe<StringFilter>;
};

export type GlobalNavigationFilter = {
  mainNav?: InputMaybe<GlobalNavigationMainNavFilter>;
  footer?: InputMaybe<GlobalNavigationFooterFilter>;
};

export type GlobalFilter = {
  alertBanner?: InputMaybe<GlobalAlertBannerFilter>;
  navigation?: InputMaybe<GlobalNavigationFilter>;
};

export type GlobalConnectionEdges = {
  __typename?: 'GlobalConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Global>;
};

export type GlobalConnection = Connection & {
  __typename?: 'GlobalConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<GlobalConnectionEdges>>>;
};

export type PageHeaderBlocksHero = {
  __typename?: 'PageHeaderBlocksHero';
  heading?: Maybe<Scalars['String']['output']>;
  subheading?: Maybe<Scalars['String']['output']>;
  buttonText?: Maybe<Scalars['String']['output']>;
  buttonLink?: Maybe<Scalars['String']['output']>;
};

export type PageHeaderBlocks = PageHeaderBlocksHero;

export type PageBlocksCtaBlock = {
  __typename?: 'PageBlocksCtaBlock';
  heading?: Maybe<Scalars['String']['output']>;
  subheading?: Maybe<Scalars['String']['output']>;
  content?: Maybe<Scalars['JSON']['output']>;
  buttonText?: Maybe<Scalars['String']['output']>;
  buttonLink?: Maybe<Scalars['String']['output']>;
  imageLeft?: Maybe<Scalars['Boolean']['output']>;
  imageSrc?: Maybe<Scalars['String']['output']>;
  imageAlt?: Maybe<Scalars['String']['output']>;
  backgroundColor?: Maybe<Scalars['String']['output']>;
};

export type PageBlocksHero = {
  __typename?: 'PageBlocksHero';
  heading?: Maybe<Scalars['String']['output']>;
  subheading?: Maybe<Scalars['String']['output']>;
  buttonText?: Maybe<Scalars['String']['output']>;
  buttonLink?: Maybe<Scalars['String']['output']>;
  src?: Maybe<Scalars['String']['output']>;
};

export type PageBlocksRichTextBlockFeatures = {
  __typename?: 'PageBlocksRichTextBlockFeatures';
  src?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['JSON']['output']>;
};

export type PageBlocksRichTextBlock = {
  __typename?: 'PageBlocksRichTextBlock';
  heading?: Maybe<Scalars['String']['output']>;
  subheading?: Maybe<Scalars['String']['output']>;
  features?: Maybe<Array<Maybe<PageBlocksRichTextBlockFeatures>>>;
};

export type PageBlocksCarouselBlockSlides = {
  __typename?: 'PageBlocksCarouselBlockSlides';
  src?: Maybe<Scalars['String']['output']>;
  alt?: Maybe<Scalars['String']['output']>;
  testimonialText: Scalars['String']['output'];
  clientName: Scalars['String']['output'];
  clientType?: Maybe<Scalars['String']['output']>;
};

export type PageBlocksCarouselBlock = {
  __typename?: 'PageBlocksCarouselBlock';
  blockTitle?: Maybe<Scalars['String']['output']>;
  blockSubtitle?: Maybe<Scalars['String']['output']>;
  slides?: Maybe<Array<Maybe<PageBlocksCarouselBlockSlides>>>;
  options_loop?: Maybe<Scalars['Boolean']['output']>;
  autoplayInterval?: Maybe<Scalars['Float']['output']>;
};

export type PageBlocksServiceListingBlockServices = {
  __typename?: 'PageBlocksServiceListingBlockServices';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
};

export type PageBlocksServiceListingBlock = {
  __typename?: 'PageBlocksServiceListingBlock';
  title?: Maybe<Scalars['String']['output']>;
  services?: Maybe<Array<Maybe<PageBlocksServiceListingBlockServices>>>;
  ctaText?: Maybe<Scalars['String']['output']>;
  ctaLink?: Maybe<Scalars['String']['output']>;
  ctaContent?: Maybe<Scalars['String']['output']>;
  backgroundColor?: Maybe<Scalars['String']['output']>;
};

export type PageBlocks = PageBlocksCtaBlock | PageBlocksHero | PageBlocksRichTextBlock | PageBlocksCarouselBlock | PageBlocksServiceListingBlock;

export type Page = Node & Document & {
  __typename?: 'Page';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  template: Scalars['String']['output'];
  subtitle?: Maybe<Scalars['String']['output']>;
  headerBlocks?: Maybe<Array<Maybe<PageHeaderBlocks>>>;
  blocks?: Maybe<Array<Maybe<PageBlocks>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PageHeaderBlocksHeroFilter = {
  heading?: InputMaybe<StringFilter>;
  subheading?: InputMaybe<StringFilter>;
  buttonText?: InputMaybe<StringFilter>;
  buttonLink?: InputMaybe<StringFilter>;
};

export type PageHeaderBlocksFilter = {
  hero?: InputMaybe<PageHeaderBlocksHeroFilter>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type PageBlocksCtaBlockFilter = {
  heading?: InputMaybe<StringFilter>;
  subheading?: InputMaybe<StringFilter>;
  content?: InputMaybe<RichTextFilter>;
  buttonText?: InputMaybe<StringFilter>;
  buttonLink?: InputMaybe<StringFilter>;
  imageLeft?: InputMaybe<BooleanFilter>;
  imageSrc?: InputMaybe<ImageFilter>;
  imageAlt?: InputMaybe<StringFilter>;
  backgroundColor?: InputMaybe<StringFilter>;
};

export type PageBlocksHeroFilter = {
  heading?: InputMaybe<StringFilter>;
  subheading?: InputMaybe<StringFilter>;
  buttonText?: InputMaybe<StringFilter>;
  buttonLink?: InputMaybe<StringFilter>;
  src?: InputMaybe<ImageFilter>;
};

export type PageBlocksRichTextBlockFeaturesFilter = {
  src?: InputMaybe<ImageFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
};

export type PageBlocksRichTextBlockFilter = {
  heading?: InputMaybe<StringFilter>;
  subheading?: InputMaybe<StringFilter>;
  features?: InputMaybe<PageBlocksRichTextBlockFeaturesFilter>;
};

export type PageBlocksCarouselBlockSlidesFilter = {
  src?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
  testimonialText?: InputMaybe<StringFilter>;
  clientName?: InputMaybe<StringFilter>;
  clientType?: InputMaybe<StringFilter>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type PageBlocksCarouselBlockFilter = {
  blockTitle?: InputMaybe<StringFilter>;
  blockSubtitle?: InputMaybe<StringFilter>;
  slides?: InputMaybe<PageBlocksCarouselBlockSlidesFilter>;
  options_loop?: InputMaybe<BooleanFilter>;
  autoplayInterval?: InputMaybe<NumberFilter>;
};

export type PageBlocksServiceListingBlockServicesFilter = {
  name?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
};

export type PageBlocksServiceListingBlockFilter = {
  title?: InputMaybe<StringFilter>;
  services?: InputMaybe<PageBlocksServiceListingBlockServicesFilter>;
  ctaText?: InputMaybe<StringFilter>;
  ctaLink?: InputMaybe<StringFilter>;
  ctaContent?: InputMaybe<StringFilter>;
  backgroundColor?: InputMaybe<StringFilter>;
};

export type PageBlocksFilter = {
  ctaBlock?: InputMaybe<PageBlocksCtaBlockFilter>;
  hero?: InputMaybe<PageBlocksHeroFilter>;
  richTextBlock?: InputMaybe<PageBlocksRichTextBlockFilter>;
  carouselBlock?: InputMaybe<PageBlocksCarouselBlockFilter>;
  serviceListingBlock?: InputMaybe<PageBlocksServiceListingBlockFilter>;
};

export type PageFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  template?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  headerBlocks?: InputMaybe<PageHeaderBlocksFilter>;
  blocks?: InputMaybe<PageBlocksFilter>;
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type Post = Node & Document & {
  __typename?: 'Post';
  title: Scalars['String']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PostFilter = {
  title?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PostConnectionEdges = {
  __typename?: 'PostConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Post>;
};

export type PostConnection = Connection & {
  __typename?: 'PostConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PostConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateGlobal: Global;
  createGlobal: Global;
  updatePage: Page;
  createPage: Page;
  updatePost: Post;
  createPost: Post;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateGlobalArgs = {
  relativePath: Scalars['String']['input'];
  params: GlobalMutation;
};


export type MutationCreateGlobalArgs = {
  relativePath: Scalars['String']['input'];
  params: GlobalMutation;
};


export type MutationUpdatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationCreatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationUpdatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationCreatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};

export type DocumentUpdateMutation = {
  global?: InputMaybe<GlobalMutation>;
  page?: InputMaybe<PageMutation>;
  post?: InputMaybe<PostMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  global?: InputMaybe<GlobalMutation>;
  page?: InputMaybe<PageMutation>;
  post?: InputMaybe<PostMutation>;
};

export type GlobalAlertBannerMutation = {
  alertLabel?: InputMaybe<Scalars['String']['input']>;
  alertLink?: InputMaybe<Scalars['String']['input']>;
  alertLinkText?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalNavigationMainNavFeaturedCardsImageMutation = {
  src?: InputMaybe<Scalars['String']['input']>;
  alt?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalNavigationMainNavFeaturedCardsMutation = {
  image?: InputMaybe<GlobalNavigationMainNavFeaturedCardsImageMutation>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  ctaText?: InputMaybe<Scalars['String']['input']>;
  ctaLink?: InputMaybe<Scalars['String']['input']>;
  layout?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalNavigationMainNavSubItemsMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  href?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  variant?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalNavigationMainNavMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  href?: InputMaybe<Scalars['String']['input']>;
  featuredCards?: InputMaybe<Array<InputMaybe<GlobalNavigationMainNavFeaturedCardsMutation>>>;
  subItems?: InputMaybe<Array<InputMaybe<GlobalNavigationMainNavSubItemsMutation>>>;
};

export type GlobalNavigationFooterContactMutation = {
  phone?: InputMaybe<Scalars['String']['input']>;
  textNumber?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalNavigationFooterSocialMutation = {
  platform?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalNavigationFooterMutation = {
  contact?: InputMaybe<GlobalNavigationFooterContactMutation>;
  social?: InputMaybe<Array<InputMaybe<GlobalNavigationFooterSocialMutation>>>;
  companyName?: InputMaybe<Scalars['String']['input']>;
};

export type GlobalNavigationMutation = {
  mainNav?: InputMaybe<Array<InputMaybe<GlobalNavigationMainNavMutation>>>;
  footer?: InputMaybe<GlobalNavigationFooterMutation>;
};

export type GlobalMutation = {
  alertBanner?: InputMaybe<GlobalAlertBannerMutation>;
  navigation?: InputMaybe<GlobalNavigationMutation>;
};

export type PageHeaderBlocksHeroMutation = {
  heading?: InputMaybe<Scalars['String']['input']>;
  subheading?: InputMaybe<Scalars['String']['input']>;
  buttonText?: InputMaybe<Scalars['String']['input']>;
  buttonLink?: InputMaybe<Scalars['String']['input']>;
};

export type PageHeaderBlocksMutation = {
  hero?: InputMaybe<PageHeaderBlocksHeroMutation>;
};

export type PageBlocksCtaBlockMutation = {
  heading?: InputMaybe<Scalars['String']['input']>;
  subheading?: InputMaybe<Scalars['String']['input']>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  buttonText?: InputMaybe<Scalars['String']['input']>;
  buttonLink?: InputMaybe<Scalars['String']['input']>;
  imageLeft?: InputMaybe<Scalars['Boolean']['input']>;
  imageSrc?: InputMaybe<Scalars['String']['input']>;
  imageAlt?: InputMaybe<Scalars['String']['input']>;
  backgroundColor?: InputMaybe<Scalars['String']['input']>;
};

export type PageBlocksHeroMutation = {
  heading?: InputMaybe<Scalars['String']['input']>;
  subheading?: InputMaybe<Scalars['String']['input']>;
  buttonText?: InputMaybe<Scalars['String']['input']>;
  buttonLink?: InputMaybe<Scalars['String']['input']>;
  src?: InputMaybe<Scalars['String']['input']>;
};

export type PageBlocksRichTextBlockFeaturesMutation = {
  src?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
};

export type PageBlocksRichTextBlockMutation = {
  heading?: InputMaybe<Scalars['String']['input']>;
  subheading?: InputMaybe<Scalars['String']['input']>;
  features?: InputMaybe<Array<InputMaybe<PageBlocksRichTextBlockFeaturesMutation>>>;
};

export type PageBlocksCarouselBlockSlidesMutation = {
  src?: InputMaybe<Scalars['String']['input']>;
  alt?: InputMaybe<Scalars['String']['input']>;
  testimonialText?: InputMaybe<Scalars['String']['input']>;
  clientName?: InputMaybe<Scalars['String']['input']>;
  clientType?: InputMaybe<Scalars['String']['input']>;
};

export type PageBlocksCarouselBlockMutation = {
  blockTitle?: InputMaybe<Scalars['String']['input']>;
  blockSubtitle?: InputMaybe<Scalars['String']['input']>;
  slides?: InputMaybe<Array<InputMaybe<PageBlocksCarouselBlockSlidesMutation>>>;
  options_loop?: InputMaybe<Scalars['Boolean']['input']>;
  autoplayInterval?: InputMaybe<Scalars['Float']['input']>;
};

export type PageBlocksServiceListingBlockServicesMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type PageBlocksServiceListingBlockMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  services?: InputMaybe<Array<InputMaybe<PageBlocksServiceListingBlockServicesMutation>>>;
  ctaText?: InputMaybe<Scalars['String']['input']>;
  ctaLink?: InputMaybe<Scalars['String']['input']>;
  ctaContent?: InputMaybe<Scalars['String']['input']>;
  backgroundColor?: InputMaybe<Scalars['String']['input']>;
};

export type PageBlocksMutation = {
  ctaBlock?: InputMaybe<PageBlocksCtaBlockMutation>;
  hero?: InputMaybe<PageBlocksHeroMutation>;
  richTextBlock?: InputMaybe<PageBlocksRichTextBlockMutation>;
  carouselBlock?: InputMaybe<PageBlocksCarouselBlockMutation>;
  serviceListingBlock?: InputMaybe<PageBlocksServiceListingBlockMutation>;
};

export type PageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  template?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  headerBlocks?: InputMaybe<Array<InputMaybe<PageHeaderBlocksMutation>>>;
  blocks?: InputMaybe<Array<InputMaybe<PageBlocksMutation>>>;
};

export type PostMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type GlobalPartsFragment = { __typename: 'Global', alertBanner?: { __typename: 'GlobalAlertBanner', alertLabel: string, alertLink: string, alertLinkText: string } | null, navigation?: { __typename: 'GlobalNavigation', mainNav?: Array<{ __typename: 'GlobalNavigationMainNav', label: string, href?: string | null, featuredCards?: Array<{ __typename: 'GlobalNavigationMainNavFeaturedCards', title: string, description: string, ctaText: string, ctaLink: string, layout?: string | null, image?: { __typename: 'GlobalNavigationMainNavFeaturedCardsImage', src: string, alt: string } | null } | null> | null, subItems?: Array<{ __typename: 'GlobalNavigationMainNavSubItems', label: string, href: string, icon?: string | null, variant?: string | null, description?: string | null } | null> | null } | null> | null, footer?: { __typename: 'GlobalNavigationFooter', companyName?: string | null, contact?: { __typename: 'GlobalNavigationFooterContact', phone?: string | null, textNumber?: string | null, email?: string | null } | null, social?: Array<{ __typename: 'GlobalNavigationFooterSocial', platform?: string | null, url?: string | null } | null> | null } | null } | null };

export type PagePartsFragment = { __typename: 'Page', title: string, description: string, template: string, subtitle?: string | null, headerBlocks?: Array<{ __typename: 'PageHeaderBlocksHero', heading?: string | null, subheading?: string | null, buttonText?: string | null, buttonLink?: string | null } | null> | null, blocks?: Array<{ __typename: 'PageBlocksCtaBlock', heading?: string | null, subheading?: string | null, content?: any | null, buttonText?: string | null, buttonLink?: string | null, imageLeft?: boolean | null, imageSrc?: string | null, imageAlt?: string | null, backgroundColor?: string | null } | { __typename: 'PageBlocksHero', heading?: string | null, subheading?: string | null, buttonText?: string | null, buttonLink?: string | null, src?: string | null } | { __typename: 'PageBlocksRichTextBlock', heading?: string | null, subheading?: string | null, features?: Array<{ __typename: 'PageBlocksRichTextBlockFeatures', src?: string | null, title?: string | null, description?: any | null } | null> | null } | { __typename: 'PageBlocksCarouselBlock', blockTitle?: string | null, blockSubtitle?: string | null, options_loop?: boolean | null, autoplayInterval?: number | null, slides?: Array<{ __typename: 'PageBlocksCarouselBlockSlides', src?: string | null, alt?: string | null, testimonialText: string, clientName: string, clientType?: string | null } | null> | null } | { __typename: 'PageBlocksServiceListingBlock', title?: string | null, ctaText?: string | null, ctaLink?: string | null, ctaContent?: string | null, backgroundColor?: string | null, services?: Array<{ __typename: 'PageBlocksServiceListingBlockServices', name: string, slug: string } | null> | null } | null> | null };

export type PostPartsFragment = { __typename: 'Post', title: string, body?: any | null };

export type GlobalQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type GlobalQuery = { __typename?: 'Query', global: { __typename: 'Global', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, alertBanner?: { __typename: 'GlobalAlertBanner', alertLabel: string, alertLink: string, alertLinkText: string } | null, navigation?: { __typename: 'GlobalNavigation', mainNav?: Array<{ __typename: 'GlobalNavigationMainNav', label: string, href?: string | null, featuredCards?: Array<{ __typename: 'GlobalNavigationMainNavFeaturedCards', title: string, description: string, ctaText: string, ctaLink: string, layout?: string | null, image?: { __typename: 'GlobalNavigationMainNavFeaturedCardsImage', src: string, alt: string } | null } | null> | null, subItems?: Array<{ __typename: 'GlobalNavigationMainNavSubItems', label: string, href: string, icon?: string | null, variant?: string | null, description?: string | null } | null> | null } | null> | null, footer?: { __typename: 'GlobalNavigationFooter', companyName?: string | null, contact?: { __typename: 'GlobalNavigationFooterContact', phone?: string | null, textNumber?: string | null, email?: string | null } | null, social?: Array<{ __typename: 'GlobalNavigationFooterSocial', platform?: string | null, url?: string | null } | null> | null } | null } | null } };

export type GlobalConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<GlobalFilter>;
}>;


export type GlobalConnectionQuery = { __typename?: 'Query', globalConnection: { __typename?: 'GlobalConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'GlobalConnectionEdges', cursor: string, node?: { __typename: 'Global', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, alertBanner?: { __typename: 'GlobalAlertBanner', alertLabel: string, alertLink: string, alertLinkText: string } | null, navigation?: { __typename: 'GlobalNavigation', mainNav?: Array<{ __typename: 'GlobalNavigationMainNav', label: string, href?: string | null, featuredCards?: Array<{ __typename: 'GlobalNavigationMainNavFeaturedCards', title: string, description: string, ctaText: string, ctaLink: string, layout?: string | null, image?: { __typename: 'GlobalNavigationMainNavFeaturedCardsImage', src: string, alt: string } | null } | null> | null, subItems?: Array<{ __typename: 'GlobalNavigationMainNavSubItems', label: string, href: string, icon?: string | null, variant?: string | null, description?: string | null } | null> | null } | null> | null, footer?: { __typename: 'GlobalNavigationFooter', companyName?: string | null, contact?: { __typename: 'GlobalNavigationFooterContact', phone?: string | null, textNumber?: string | null, email?: string | null } | null, social?: Array<{ __typename: 'GlobalNavigationFooterSocial', platform?: string | null, url?: string | null } | null> | null } | null } | null } | null } | null> | null } };

export type PageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename: 'Page', id: string, title: string, description: string, template: string, subtitle?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, headerBlocks?: Array<{ __typename: 'PageHeaderBlocksHero', heading?: string | null, subheading?: string | null, buttonText?: string | null, buttonLink?: string | null } | null> | null, blocks?: Array<{ __typename: 'PageBlocksCtaBlock', heading?: string | null, subheading?: string | null, content?: any | null, buttonText?: string | null, buttonLink?: string | null, imageLeft?: boolean | null, imageSrc?: string | null, imageAlt?: string | null, backgroundColor?: string | null } | { __typename: 'PageBlocksHero', heading?: string | null, subheading?: string | null, buttonText?: string | null, buttonLink?: string | null, src?: string | null } | { __typename: 'PageBlocksRichTextBlock', heading?: string | null, subheading?: string | null, features?: Array<{ __typename: 'PageBlocksRichTextBlockFeatures', src?: string | null, title?: string | null, description?: any | null } | null> | null } | { __typename: 'PageBlocksCarouselBlock', blockTitle?: string | null, blockSubtitle?: string | null, options_loop?: boolean | null, autoplayInterval?: number | null, slides?: Array<{ __typename: 'PageBlocksCarouselBlockSlides', src?: string | null, alt?: string | null, testimonialText: string, clientName: string, clientType?: string | null } | null> | null } | { __typename: 'PageBlocksServiceListingBlock', title?: string | null, ctaText?: string | null, ctaLink?: string | null, ctaContent?: string | null, backgroundColor?: string | null, services?: Array<{ __typename: 'PageBlocksServiceListingBlockServices', name: string, slug: string } | null> | null } | null> | null } };

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
}>;


export type PageConnectionQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PageConnectionEdges', cursor: string, node?: { __typename: 'Page', id: string, title: string, description: string, template: string, subtitle?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, headerBlocks?: Array<{ __typename: 'PageHeaderBlocksHero', heading?: string | null, subheading?: string | null, buttonText?: string | null, buttonLink?: string | null } | null> | null, blocks?: Array<{ __typename: 'PageBlocksCtaBlock', heading?: string | null, subheading?: string | null, content?: any | null, buttonText?: string | null, buttonLink?: string | null, imageLeft?: boolean | null, imageSrc?: string | null, imageAlt?: string | null, backgroundColor?: string | null } | { __typename: 'PageBlocksHero', heading?: string | null, subheading?: string | null, buttonText?: string | null, buttonLink?: string | null, src?: string | null } | { __typename: 'PageBlocksRichTextBlock', heading?: string | null, subheading?: string | null, features?: Array<{ __typename: 'PageBlocksRichTextBlockFeatures', src?: string | null, title?: string | null, description?: any | null } | null> | null } | { __typename: 'PageBlocksCarouselBlock', blockTitle?: string | null, blockSubtitle?: string | null, options_loop?: boolean | null, autoplayInterval?: number | null, slides?: Array<{ __typename: 'PageBlocksCarouselBlockSlides', src?: string | null, alt?: string | null, testimonialText: string, clientName: string, clientType?: string | null } | null> | null } | { __typename: 'PageBlocksServiceListingBlock', title?: string | null, ctaText?: string | null, ctaLink?: string | null, ctaContent?: string | null, backgroundColor?: string | null, services?: Array<{ __typename: 'PageBlocksServiceListingBlockServices', name: string, slug: string } | null> | null } | null> | null } | null } | null> | null } };

export type PostQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PostQuery = { __typename?: 'Query', post: { __typename: 'Post', id: string, title: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PostConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
}>;


export type PostConnectionQuery = { __typename?: 'Query', postConnection: { __typename?: 'PostConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PostConnectionEdges', cursor: string, node?: { __typename: 'Post', id: string, title: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const GlobalPartsFragmentDoc = gql`
    fragment GlobalParts on Global {
  __typename
  alertBanner {
    __typename
    alertLabel
    alertLink
    alertLinkText
  }
  navigation {
    __typename
    mainNav {
      __typename
      label
      href
      featuredCards {
        __typename
        image {
          __typename
          src
          alt
        }
        title
        description
        ctaText
        ctaLink
        layout
      }
      subItems {
        __typename
        label
        href
        icon
        variant
        description
      }
    }
    footer {
      __typename
      contact {
        __typename
        phone
        textNumber
        email
      }
      social {
        __typename
        platform
        url
      }
      companyName
    }
  }
}
    `;
export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  __typename
  title
  description
  template
  subtitle
  headerBlocks {
    __typename
    ... on PageHeaderBlocksHero {
      heading
      subheading
      buttonText
      buttonLink
    }
  }
  blocks {
    __typename
    ... on PageBlocksCtaBlock {
      heading
      subheading
      content
      buttonText
      buttonLink
      imageLeft
      imageSrc
      imageAlt
      backgroundColor
    }
    ... on PageBlocksHero {
      heading
      subheading
      buttonText
      buttonLink
      src
    }
    ... on PageBlocksRichTextBlock {
      heading
      subheading
      features {
        __typename
        src
        title
        description
      }
    }
    ... on PageBlocksCarouselBlock {
      blockTitle
      blockSubtitle
      slides {
        __typename
        src
        alt
        testimonialText
        clientName
        clientType
      }
      options_loop
      autoplayInterval
    }
    ... on PageBlocksServiceListingBlock {
      title
      services {
        __typename
        name
        slug
      }
      ctaText
      ctaLink
      ctaContent
      backgroundColor
    }
  }
}
    `;
export const PostPartsFragmentDoc = gql`
    fragment PostParts on Post {
  __typename
  title
  body
}
    `;
export const GlobalDocument = gql`
    query global($relativePath: String!) {
  global(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...GlobalParts
  }
}
    ${GlobalPartsFragmentDoc}`;
export const GlobalConnectionDocument = gql`
    query globalConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: GlobalFilter) {
  globalConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...GlobalParts
      }
    }
  }
}
    ${GlobalPartsFragmentDoc}`;
export const PageDocument = gql`
    query page($relativePath: String!) {
  page(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PageParts
  }
}
    ${PagePartsFragmentDoc}`;
export const PageConnectionDocument = gql`
    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {
  pageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PageParts
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export const PostDocument = gql`
    query post($relativePath: String!) {
  post(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PostParts
  }
}
    ${PostPartsFragmentDoc}`;
export const PostConnectionDocument = gql`
    query postConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PostFilter) {
  postConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PostParts
      }
    }
  }
}
    ${PostPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      global(variables: GlobalQueryVariables, options?: C): Promise<{data: GlobalQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalQueryVariables, query: string}> {
        return requester<{data: GlobalQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalQueryVariables, query: string}, GlobalQueryVariables>(GlobalDocument, variables, options);
      },
    globalConnection(variables?: GlobalConnectionQueryVariables, options?: C): Promise<{data: GlobalConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalConnectionQueryVariables, query: string}> {
        return requester<{data: GlobalConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: GlobalConnectionQueryVariables, query: string}, GlobalConnectionQueryVariables>(GlobalConnectionDocument, variables, options);
      },
    page(variables: PageQueryVariables, options?: C): Promise<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}> {
        return requester<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}, PageQueryVariables>(PageDocument, variables, options);
      },
    pageConnection(variables?: PageConnectionQueryVariables, options?: C): Promise<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}> {
        return requester<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}, PageConnectionQueryVariables>(PageConnectionDocument, variables, options);
      },
    post(variables: PostQueryVariables, options?: C): Promise<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}> {
        return requester<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}, PostQueryVariables>(PostDocument, variables, options);
      },
    postConnection(variables?: PostConnectionQueryVariables, options?: C): Promise<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}> {
        return requester<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}, PostConnectionQueryVariables>(PostConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  